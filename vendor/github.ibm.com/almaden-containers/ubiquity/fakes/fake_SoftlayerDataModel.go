// This file was generated by counterfeiter
package fakes

import (
	"sync"

	_ "github.com/mattn/go-sqlite3"
	"github.ibm.com/almaden-containers/ubiquity/local/softlayer"
)

type FakeSoftlayerDataModel struct {
	CreateVolumeTableStub        func() error
	createVolumeTableMutex       sync.RWMutex
	createVolumeTableArgsForCall []struct{}
	createVolumeTableReturns     struct {
		result1 error
	}
	DeleteVolumeStub        func(name string) error
	deleteVolumeMutex       sync.RWMutex
	deleteVolumeArgsForCall []struct {
		name string
	}
	deleteVolumeReturns struct {
		result1 error
	}
	InsertFileshareStub        func(fileshareID int, volumeName string, mountPath string, opts map[string]interface{}) error
	insertFileshareMutex       sync.RWMutex
	insertFileshareArgsForCall []struct {
		fileshareID int
		volumeName  string
		mountPath   string
		opts        map[string]interface{}
	}
	insertFileshareReturns struct {
		result1 error
	}
	GetVolumeStub        func(name string) (softlayer.SoftlayerVolume, bool, error)
	getVolumeMutex       sync.RWMutex
	getVolumeArgsForCall []struct {
		name string
	}
	getVolumeReturns struct {
		result1 softlayer.SoftlayerVolume
		result2 bool
		result3 error
	}
	GetVolumeForMountPointStub        func(mountpoint string) (string, error)
	getVolumeForMountPointMutex       sync.RWMutex
	getVolumeForMountPointArgsForCall []struct {
		mountpoint string
	}
	getVolumeForMountPointReturns struct {
		result1 string
		result2 error
	}
	ListVolumesStub        func() ([]softlayer.SoftlayerVolume, error)
	listVolumesMutex       sync.RWMutex
	listVolumesArgsForCall []struct{}
	listVolumesReturns     struct {
		result1 []softlayer.SoftlayerVolume
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSoftlayerDataModel) CreateVolumeTable() error {
	fake.createVolumeTableMutex.Lock()
	fake.createVolumeTableArgsForCall = append(fake.createVolumeTableArgsForCall, struct{}{})
	fake.recordInvocation("CreateVolumeTable", []interface{}{})
	fake.createVolumeTableMutex.Unlock()
	if fake.CreateVolumeTableStub != nil {
		return fake.CreateVolumeTableStub()
	}
	return fake.createVolumeTableReturns.result1
}

func (fake *FakeSoftlayerDataModel) CreateVolumeTableCallCount() int {
	fake.createVolumeTableMutex.RLock()
	defer fake.createVolumeTableMutex.RUnlock()
	return len(fake.createVolumeTableArgsForCall)
}

func (fake *FakeSoftlayerDataModel) CreateVolumeTableReturns(result1 error) {
	fake.CreateVolumeTableStub = nil
	fake.createVolumeTableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSoftlayerDataModel) DeleteVolume(name string) error {
	fake.deleteVolumeMutex.Lock()
	fake.deleteVolumeArgsForCall = append(fake.deleteVolumeArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("DeleteVolume", []interface{}{name})
	fake.deleteVolumeMutex.Unlock()
	if fake.DeleteVolumeStub != nil {
		return fake.DeleteVolumeStub(name)
	}
	return fake.deleteVolumeReturns.result1
}

func (fake *FakeSoftlayerDataModel) DeleteVolumeCallCount() int {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return len(fake.deleteVolumeArgsForCall)
}

func (fake *FakeSoftlayerDataModel) DeleteVolumeArgsForCall(i int) string {
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	return fake.deleteVolumeArgsForCall[i].name
}

func (fake *FakeSoftlayerDataModel) DeleteVolumeReturns(result1 error) {
	fake.DeleteVolumeStub = nil
	fake.deleteVolumeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSoftlayerDataModel) InsertFileshare(fileshareID int, volumeName string, mountPath string, opts map[string]interface{}) error {
	fake.insertFileshareMutex.Lock()
	fake.insertFileshareArgsForCall = append(fake.insertFileshareArgsForCall, struct {
		fileshareID int
		volumeName  string
		mountPath   string
		opts        map[string]interface{}
	}{fileshareID, volumeName, mountPath, opts})
	fake.recordInvocation("InsertFileshare", []interface{}{fileshareID, volumeName, mountPath, opts})
	fake.insertFileshareMutex.Unlock()
	if fake.InsertFileshareStub != nil {
		return fake.InsertFileshareStub(fileshareID, volumeName, mountPath, opts)
	}
	return fake.insertFileshareReturns.result1
}

func (fake *FakeSoftlayerDataModel) InsertFileshareCallCount() int {
	fake.insertFileshareMutex.RLock()
	defer fake.insertFileshareMutex.RUnlock()
	return len(fake.insertFileshareArgsForCall)
}

func (fake *FakeSoftlayerDataModel) InsertFileshareArgsForCall(i int) (int, string, string, map[string]interface{}) {
	fake.insertFileshareMutex.RLock()
	defer fake.insertFileshareMutex.RUnlock()
	return fake.insertFileshareArgsForCall[i].fileshareID, fake.insertFileshareArgsForCall[i].volumeName, fake.insertFileshareArgsForCall[i].mountPath, fake.insertFileshareArgsForCall[i].opts
}

func (fake *FakeSoftlayerDataModel) InsertFileshareReturns(result1 error) {
	fake.InsertFileshareStub = nil
	fake.insertFileshareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSoftlayerDataModel) GetVolume(name string) (softlayer.SoftlayerVolume, bool, error) {
	fake.getVolumeMutex.Lock()
	fake.getVolumeArgsForCall = append(fake.getVolumeArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetVolume", []interface{}{name})
	fake.getVolumeMutex.Unlock()
	if fake.GetVolumeStub != nil {
		return fake.GetVolumeStub(name)
	}
	return fake.getVolumeReturns.result1, fake.getVolumeReturns.result2, fake.getVolumeReturns.result3
}

func (fake *FakeSoftlayerDataModel) GetVolumeCallCount() int {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return len(fake.getVolumeArgsForCall)
}

func (fake *FakeSoftlayerDataModel) GetVolumeArgsForCall(i int) string {
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	return fake.getVolumeArgsForCall[i].name
}

func (fake *FakeSoftlayerDataModel) GetVolumeReturns(result1 softlayer.SoftlayerVolume, result2 bool, result3 error) {
	fake.GetVolumeStub = nil
	fake.getVolumeReturns = struct {
		result1 softlayer.SoftlayerVolume
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSoftlayerDataModel) GetVolumeForMountPoint(mountpoint string) (string, error) {
	fake.getVolumeForMountPointMutex.Lock()
	fake.getVolumeForMountPointArgsForCall = append(fake.getVolumeForMountPointArgsForCall, struct {
		mountpoint string
	}{mountpoint})
	fake.recordInvocation("GetVolumeForMountPoint", []interface{}{mountpoint})
	fake.getVolumeForMountPointMutex.Unlock()
	if fake.GetVolumeForMountPointStub != nil {
		return fake.GetVolumeForMountPointStub(mountpoint)
	}
	return fake.getVolumeForMountPointReturns.result1, fake.getVolumeForMountPointReturns.result2
}

func (fake *FakeSoftlayerDataModel) GetVolumeForMountPointCallCount() int {
	fake.getVolumeForMountPointMutex.RLock()
	defer fake.getVolumeForMountPointMutex.RUnlock()
	return len(fake.getVolumeForMountPointArgsForCall)
}

func (fake *FakeSoftlayerDataModel) GetVolumeForMountPointArgsForCall(i int) string {
	fake.getVolumeForMountPointMutex.RLock()
	defer fake.getVolumeForMountPointMutex.RUnlock()
	return fake.getVolumeForMountPointArgsForCall[i].mountpoint
}

func (fake *FakeSoftlayerDataModel) GetVolumeForMountPointReturns(result1 string, result2 error) {
	fake.GetVolumeForMountPointStub = nil
	fake.getVolumeForMountPointReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftlayerDataModel) ListVolumes() ([]softlayer.SoftlayerVolume, error) {
	fake.listVolumesMutex.Lock()
	fake.listVolumesArgsForCall = append(fake.listVolumesArgsForCall, struct{}{})
	fake.recordInvocation("ListVolumes", []interface{}{})
	fake.listVolumesMutex.Unlock()
	if fake.ListVolumesStub != nil {
		return fake.ListVolumesStub()
	}
	return fake.listVolumesReturns.result1, fake.listVolumesReturns.result2
}

func (fake *FakeSoftlayerDataModel) ListVolumesCallCount() int {
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return len(fake.listVolumesArgsForCall)
}

func (fake *FakeSoftlayerDataModel) ListVolumesReturns(result1 []softlayer.SoftlayerVolume, result2 error) {
	fake.ListVolumesStub = nil
	fake.listVolumesReturns = struct {
		result1 []softlayer.SoftlayerVolume
		result2 error
	}{result1, result2}
}

func (fake *FakeSoftlayerDataModel) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVolumeTableMutex.RLock()
	defer fake.createVolumeTableMutex.RUnlock()
	fake.deleteVolumeMutex.RLock()
	defer fake.deleteVolumeMutex.RUnlock()
	fake.insertFileshareMutex.RLock()
	defer fake.insertFileshareMutex.RUnlock()
	fake.getVolumeMutex.RLock()
	defer fake.getVolumeMutex.RUnlock()
	fake.getVolumeForMountPointMutex.RLock()
	defer fake.getVolumeForMountPointMutex.RUnlock()
	fake.listVolumesMutex.RLock()
	defer fake.listVolumesMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSoftlayerDataModel) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ softlayer.SoftlayerDataModel = new(FakeSoftlayerDataModel)
