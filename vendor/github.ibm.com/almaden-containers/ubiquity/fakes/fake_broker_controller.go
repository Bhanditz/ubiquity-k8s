// This file was generated by counterfeiter
package fakes

import (
	"log"
	"sync"

	"github.ibm.com/almaden-containers/ubiquity/resources"
	"github.ibm.com/almaden-containers/ubiquity/service_broker"
)

type FakeBrokerController struct {
	GetCatalogStub        func(logger *log.Logger) (resources.Catalog, error)
	getCatalogMutex       sync.RWMutex
	getCatalogArgsForCall []struct {
		logger *log.Logger
	}
	getCatalogReturns struct {
		result1 resources.Catalog
		result2 error
	}
	CreateServiceInstanceStub        func(logger *log.Logger, serverInstanceId string, instance resources.ServiceInstance) (resources.CreateServiceInstanceResponse, error)
	createServiceInstanceMutex       sync.RWMutex
	createServiceInstanceArgsForCall []struct {
		logger           *log.Logger
		serverInstanceId string
		instance         resources.ServiceInstance
	}
	createServiceInstanceReturns struct {
		result1 resources.CreateServiceInstanceResponse
		result2 error
	}
	ServiceInstanceExistsStub        func(logger *log.Logger, serviceInstanceId string) bool
	serviceInstanceExistsMutex       sync.RWMutex
	serviceInstanceExistsArgsForCall []struct {
		logger            *log.Logger
		serviceInstanceId string
	}
	serviceInstanceExistsReturns struct {
		result1 bool
	}
	ServiceInstancePropertiesMatchStub        func(logger *log.Logger, serviceInstanceId string, instance resources.ServiceInstance) bool
	serviceInstancePropertiesMatchMutex       sync.RWMutex
	serviceInstancePropertiesMatchArgsForCall []struct {
		logger            *log.Logger
		serviceInstanceId string
		instance          resources.ServiceInstance
	}
	serviceInstancePropertiesMatchReturns struct {
		result1 bool
	}
	DeleteServiceInstanceStub        func(logger *log.Logger, serviceInstanceId string) error
	deleteServiceInstanceMutex       sync.RWMutex
	deleteServiceInstanceArgsForCall []struct {
		logger            *log.Logger
		serviceInstanceId string
	}
	deleteServiceInstanceReturns struct {
		result1 error
	}
	BindServiceInstanceStub        func(logger *log.Logger, serverInstanceId string, bindingId string, bindingInfo resources.ServiceBinding) (resources.CreateServiceBindingResponse, error)
	bindServiceInstanceMutex       sync.RWMutex
	bindServiceInstanceArgsForCall []struct {
		logger           *log.Logger
		serverInstanceId string
		bindingId        string
		bindingInfo      resources.ServiceBinding
	}
	bindServiceInstanceReturns struct {
		result1 resources.CreateServiceBindingResponse
		result2 error
	}
	ServiceBindingExistsStub        func(logger *log.Logger, serviceInstanceId string, bindingId string) bool
	serviceBindingExistsMutex       sync.RWMutex
	serviceBindingExistsArgsForCall []struct {
		logger            *log.Logger
		serviceInstanceId string
		bindingId         string
	}
	serviceBindingExistsReturns struct {
		result1 bool
	}
	ServiceBindingPropertiesMatchStub        func(logger *log.Logger, serviceInstanceId string, bindingId string, binding resources.ServiceBinding) bool
	serviceBindingPropertiesMatchMutex       sync.RWMutex
	serviceBindingPropertiesMatchArgsForCall []struct {
		logger            *log.Logger
		serviceInstanceId string
		bindingId         string
		binding           resources.ServiceBinding
	}
	serviceBindingPropertiesMatchReturns struct {
		result1 bool
	}
	GetBindingStub        func(logger *log.Logger, instanceId, bindingId string) (resources.ServiceBinding, error)
	getBindingMutex       sync.RWMutex
	getBindingArgsForCall []struct {
		logger     *log.Logger
		instanceId string
		bindingId  string
	}
	getBindingReturns struct {
		result1 resources.ServiceBinding
		result2 error
	}
	UnbindServiceInstanceStub        func(logger *log.Logger, serverInstanceId string, bindingId string) error
	unbindServiceInstanceMutex       sync.RWMutex
	unbindServiceInstanceArgsForCall []struct {
		logger           *log.Logger
		serverInstanceId string
		bindingId        string
	}
	unbindServiceInstanceReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBrokerController) GetCatalog(logger *log.Logger) (resources.Catalog, error) {
	fake.getCatalogMutex.Lock()
	fake.getCatalogArgsForCall = append(fake.getCatalogArgsForCall, struct {
		logger *log.Logger
	}{logger})
	fake.recordInvocation("GetCatalog", []interface{}{logger})
	fake.getCatalogMutex.Unlock()
	if fake.GetCatalogStub != nil {
		return fake.GetCatalogStub(logger)
	}
	return fake.getCatalogReturns.result1, fake.getCatalogReturns.result2
}

func (fake *FakeBrokerController) GetCatalogCallCount() int {
	fake.getCatalogMutex.RLock()
	defer fake.getCatalogMutex.RUnlock()
	return len(fake.getCatalogArgsForCall)
}

func (fake *FakeBrokerController) GetCatalogArgsForCall(i int) *log.Logger {
	fake.getCatalogMutex.RLock()
	defer fake.getCatalogMutex.RUnlock()
	return fake.getCatalogArgsForCall[i].logger
}

func (fake *FakeBrokerController) GetCatalogReturns(result1 resources.Catalog, result2 error) {
	fake.GetCatalogStub = nil
	fake.getCatalogReturns = struct {
		result1 resources.Catalog
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerController) CreateServiceInstance(logger *log.Logger, serverInstanceId string, instance resources.ServiceInstance) (resources.CreateServiceInstanceResponse, error) {
	fake.createServiceInstanceMutex.Lock()
	fake.createServiceInstanceArgsForCall = append(fake.createServiceInstanceArgsForCall, struct {
		logger           *log.Logger
		serverInstanceId string
		instance         resources.ServiceInstance
	}{logger, serverInstanceId, instance})
	fake.recordInvocation("CreateServiceInstance", []interface{}{logger, serverInstanceId, instance})
	fake.createServiceInstanceMutex.Unlock()
	if fake.CreateServiceInstanceStub != nil {
		return fake.CreateServiceInstanceStub(logger, serverInstanceId, instance)
	}
	return fake.createServiceInstanceReturns.result1, fake.createServiceInstanceReturns.result2
}

func (fake *FakeBrokerController) CreateServiceInstanceCallCount() int {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return len(fake.createServiceInstanceArgsForCall)
}

func (fake *FakeBrokerController) CreateServiceInstanceArgsForCall(i int) (*log.Logger, string, resources.ServiceInstance) {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return fake.createServiceInstanceArgsForCall[i].logger, fake.createServiceInstanceArgsForCall[i].serverInstanceId, fake.createServiceInstanceArgsForCall[i].instance
}

func (fake *FakeBrokerController) CreateServiceInstanceReturns(result1 resources.CreateServiceInstanceResponse, result2 error) {
	fake.CreateServiceInstanceStub = nil
	fake.createServiceInstanceReturns = struct {
		result1 resources.CreateServiceInstanceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerController) ServiceInstanceExists(logger *log.Logger, serviceInstanceId string) bool {
	fake.serviceInstanceExistsMutex.Lock()
	fake.serviceInstanceExistsArgsForCall = append(fake.serviceInstanceExistsArgsForCall, struct {
		logger            *log.Logger
		serviceInstanceId string
	}{logger, serviceInstanceId})
	fake.recordInvocation("ServiceInstanceExists", []interface{}{logger, serviceInstanceId})
	fake.serviceInstanceExistsMutex.Unlock()
	if fake.ServiceInstanceExistsStub != nil {
		return fake.ServiceInstanceExistsStub(logger, serviceInstanceId)
	}
	return fake.serviceInstanceExistsReturns.result1
}

func (fake *FakeBrokerController) ServiceInstanceExistsCallCount() int {
	fake.serviceInstanceExistsMutex.RLock()
	defer fake.serviceInstanceExistsMutex.RUnlock()
	return len(fake.serviceInstanceExistsArgsForCall)
}

func (fake *FakeBrokerController) ServiceInstanceExistsArgsForCall(i int) (*log.Logger, string) {
	fake.serviceInstanceExistsMutex.RLock()
	defer fake.serviceInstanceExistsMutex.RUnlock()
	return fake.serviceInstanceExistsArgsForCall[i].logger, fake.serviceInstanceExistsArgsForCall[i].serviceInstanceId
}

func (fake *FakeBrokerController) ServiceInstanceExistsReturns(result1 bool) {
	fake.ServiceInstanceExistsStub = nil
	fake.serviceInstanceExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBrokerController) ServiceInstancePropertiesMatch(logger *log.Logger, serviceInstanceId string, instance resources.ServiceInstance) bool {
	fake.serviceInstancePropertiesMatchMutex.Lock()
	fake.serviceInstancePropertiesMatchArgsForCall = append(fake.serviceInstancePropertiesMatchArgsForCall, struct {
		logger            *log.Logger
		serviceInstanceId string
		instance          resources.ServiceInstance
	}{logger, serviceInstanceId, instance})
	fake.recordInvocation("ServiceInstancePropertiesMatch", []interface{}{logger, serviceInstanceId, instance})
	fake.serviceInstancePropertiesMatchMutex.Unlock()
	if fake.ServiceInstancePropertiesMatchStub != nil {
		return fake.ServiceInstancePropertiesMatchStub(logger, serviceInstanceId, instance)
	}
	return fake.serviceInstancePropertiesMatchReturns.result1
}

func (fake *FakeBrokerController) ServiceInstancePropertiesMatchCallCount() int {
	fake.serviceInstancePropertiesMatchMutex.RLock()
	defer fake.serviceInstancePropertiesMatchMutex.RUnlock()
	return len(fake.serviceInstancePropertiesMatchArgsForCall)
}

func (fake *FakeBrokerController) ServiceInstancePropertiesMatchArgsForCall(i int) (*log.Logger, string, resources.ServiceInstance) {
	fake.serviceInstancePropertiesMatchMutex.RLock()
	defer fake.serviceInstancePropertiesMatchMutex.RUnlock()
	return fake.serviceInstancePropertiesMatchArgsForCall[i].logger, fake.serviceInstancePropertiesMatchArgsForCall[i].serviceInstanceId, fake.serviceInstancePropertiesMatchArgsForCall[i].instance
}

func (fake *FakeBrokerController) ServiceInstancePropertiesMatchReturns(result1 bool) {
	fake.ServiceInstancePropertiesMatchStub = nil
	fake.serviceInstancePropertiesMatchReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBrokerController) DeleteServiceInstance(logger *log.Logger, serviceInstanceId string) error {
	fake.deleteServiceInstanceMutex.Lock()
	fake.deleteServiceInstanceArgsForCall = append(fake.deleteServiceInstanceArgsForCall, struct {
		logger            *log.Logger
		serviceInstanceId string
	}{logger, serviceInstanceId})
	fake.recordInvocation("DeleteServiceInstance", []interface{}{logger, serviceInstanceId})
	fake.deleteServiceInstanceMutex.Unlock()
	if fake.DeleteServiceInstanceStub != nil {
		return fake.DeleteServiceInstanceStub(logger, serviceInstanceId)
	}
	return fake.deleteServiceInstanceReturns.result1
}

func (fake *FakeBrokerController) DeleteServiceInstanceCallCount() int {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return len(fake.deleteServiceInstanceArgsForCall)
}

func (fake *FakeBrokerController) DeleteServiceInstanceArgsForCall(i int) (*log.Logger, string) {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return fake.deleteServiceInstanceArgsForCall[i].logger, fake.deleteServiceInstanceArgsForCall[i].serviceInstanceId
}

func (fake *FakeBrokerController) DeleteServiceInstanceReturns(result1 error) {
	fake.DeleteServiceInstanceStub = nil
	fake.deleteServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBrokerController) BindServiceInstance(logger *log.Logger, serverInstanceId string, bindingId string, bindingInfo resources.ServiceBinding) (resources.CreateServiceBindingResponse, error) {
	fake.bindServiceInstanceMutex.Lock()
	fake.bindServiceInstanceArgsForCall = append(fake.bindServiceInstanceArgsForCall, struct {
		logger           *log.Logger
		serverInstanceId string
		bindingId        string
		bindingInfo      resources.ServiceBinding
	}{logger, serverInstanceId, bindingId, bindingInfo})
	fake.recordInvocation("BindServiceInstance", []interface{}{logger, serverInstanceId, bindingId, bindingInfo})
	fake.bindServiceInstanceMutex.Unlock()
	if fake.BindServiceInstanceStub != nil {
		return fake.BindServiceInstanceStub(logger, serverInstanceId, bindingId, bindingInfo)
	}
	return fake.bindServiceInstanceReturns.result1, fake.bindServiceInstanceReturns.result2
}

func (fake *FakeBrokerController) BindServiceInstanceCallCount() int {
	fake.bindServiceInstanceMutex.RLock()
	defer fake.bindServiceInstanceMutex.RUnlock()
	return len(fake.bindServiceInstanceArgsForCall)
}

func (fake *FakeBrokerController) BindServiceInstanceArgsForCall(i int) (*log.Logger, string, string, resources.ServiceBinding) {
	fake.bindServiceInstanceMutex.RLock()
	defer fake.bindServiceInstanceMutex.RUnlock()
	return fake.bindServiceInstanceArgsForCall[i].logger, fake.bindServiceInstanceArgsForCall[i].serverInstanceId, fake.bindServiceInstanceArgsForCall[i].bindingId, fake.bindServiceInstanceArgsForCall[i].bindingInfo
}

func (fake *FakeBrokerController) BindServiceInstanceReturns(result1 resources.CreateServiceBindingResponse, result2 error) {
	fake.BindServiceInstanceStub = nil
	fake.bindServiceInstanceReturns = struct {
		result1 resources.CreateServiceBindingResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerController) ServiceBindingExists(logger *log.Logger, serviceInstanceId string, bindingId string) bool {
	fake.serviceBindingExistsMutex.Lock()
	fake.serviceBindingExistsArgsForCall = append(fake.serviceBindingExistsArgsForCall, struct {
		logger            *log.Logger
		serviceInstanceId string
		bindingId         string
	}{logger, serviceInstanceId, bindingId})
	fake.recordInvocation("ServiceBindingExists", []interface{}{logger, serviceInstanceId, bindingId})
	fake.serviceBindingExistsMutex.Unlock()
	if fake.ServiceBindingExistsStub != nil {
		return fake.ServiceBindingExistsStub(logger, serviceInstanceId, bindingId)
	}
	return fake.serviceBindingExistsReturns.result1
}

func (fake *FakeBrokerController) ServiceBindingExistsCallCount() int {
	fake.serviceBindingExistsMutex.RLock()
	defer fake.serviceBindingExistsMutex.RUnlock()
	return len(fake.serviceBindingExistsArgsForCall)
}

func (fake *FakeBrokerController) ServiceBindingExistsArgsForCall(i int) (*log.Logger, string, string) {
	fake.serviceBindingExistsMutex.RLock()
	defer fake.serviceBindingExistsMutex.RUnlock()
	return fake.serviceBindingExistsArgsForCall[i].logger, fake.serviceBindingExistsArgsForCall[i].serviceInstanceId, fake.serviceBindingExistsArgsForCall[i].bindingId
}

func (fake *FakeBrokerController) ServiceBindingExistsReturns(result1 bool) {
	fake.ServiceBindingExistsStub = nil
	fake.serviceBindingExistsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBrokerController) ServiceBindingPropertiesMatch(logger *log.Logger, serviceInstanceId string, bindingId string, binding resources.ServiceBinding) bool {
	fake.serviceBindingPropertiesMatchMutex.Lock()
	fake.serviceBindingPropertiesMatchArgsForCall = append(fake.serviceBindingPropertiesMatchArgsForCall, struct {
		logger            *log.Logger
		serviceInstanceId string
		bindingId         string
		binding           resources.ServiceBinding
	}{logger, serviceInstanceId, bindingId, binding})
	fake.recordInvocation("ServiceBindingPropertiesMatch", []interface{}{logger, serviceInstanceId, bindingId, binding})
	fake.serviceBindingPropertiesMatchMutex.Unlock()
	if fake.ServiceBindingPropertiesMatchStub != nil {
		return fake.ServiceBindingPropertiesMatchStub(logger, serviceInstanceId, bindingId, binding)
	}
	return fake.serviceBindingPropertiesMatchReturns.result1
}

func (fake *FakeBrokerController) ServiceBindingPropertiesMatchCallCount() int {
	fake.serviceBindingPropertiesMatchMutex.RLock()
	defer fake.serviceBindingPropertiesMatchMutex.RUnlock()
	return len(fake.serviceBindingPropertiesMatchArgsForCall)
}

func (fake *FakeBrokerController) ServiceBindingPropertiesMatchArgsForCall(i int) (*log.Logger, string, string, resources.ServiceBinding) {
	fake.serviceBindingPropertiesMatchMutex.RLock()
	defer fake.serviceBindingPropertiesMatchMutex.RUnlock()
	return fake.serviceBindingPropertiesMatchArgsForCall[i].logger, fake.serviceBindingPropertiesMatchArgsForCall[i].serviceInstanceId, fake.serviceBindingPropertiesMatchArgsForCall[i].bindingId, fake.serviceBindingPropertiesMatchArgsForCall[i].binding
}

func (fake *FakeBrokerController) ServiceBindingPropertiesMatchReturns(result1 bool) {
	fake.ServiceBindingPropertiesMatchStub = nil
	fake.serviceBindingPropertiesMatchReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeBrokerController) GetBinding(logger *log.Logger, instanceId string, bindingId string) (resources.ServiceBinding, error) {
	fake.getBindingMutex.Lock()
	fake.getBindingArgsForCall = append(fake.getBindingArgsForCall, struct {
		logger     *log.Logger
		instanceId string
		bindingId  string
	}{logger, instanceId, bindingId})
	fake.recordInvocation("GetBinding", []interface{}{logger, instanceId, bindingId})
	fake.getBindingMutex.Unlock()
	if fake.GetBindingStub != nil {
		return fake.GetBindingStub(logger, instanceId, bindingId)
	}
	return fake.getBindingReturns.result1, fake.getBindingReturns.result2
}

func (fake *FakeBrokerController) GetBindingCallCount() int {
	fake.getBindingMutex.RLock()
	defer fake.getBindingMutex.RUnlock()
	return len(fake.getBindingArgsForCall)
}

func (fake *FakeBrokerController) GetBindingArgsForCall(i int) (*log.Logger, string, string) {
	fake.getBindingMutex.RLock()
	defer fake.getBindingMutex.RUnlock()
	return fake.getBindingArgsForCall[i].logger, fake.getBindingArgsForCall[i].instanceId, fake.getBindingArgsForCall[i].bindingId
}

func (fake *FakeBrokerController) GetBindingReturns(result1 resources.ServiceBinding, result2 error) {
	fake.GetBindingStub = nil
	fake.getBindingReturns = struct {
		result1 resources.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeBrokerController) UnbindServiceInstance(logger *log.Logger, serverInstanceId string, bindingId string) error {
	fake.unbindServiceInstanceMutex.Lock()
	fake.unbindServiceInstanceArgsForCall = append(fake.unbindServiceInstanceArgsForCall, struct {
		logger           *log.Logger
		serverInstanceId string
		bindingId        string
	}{logger, serverInstanceId, bindingId})
	fake.recordInvocation("UnbindServiceInstance", []interface{}{logger, serverInstanceId, bindingId})
	fake.unbindServiceInstanceMutex.Unlock()
	if fake.UnbindServiceInstanceStub != nil {
		return fake.UnbindServiceInstanceStub(logger, serverInstanceId, bindingId)
	}
	return fake.unbindServiceInstanceReturns.result1
}

func (fake *FakeBrokerController) UnbindServiceInstanceCallCount() int {
	fake.unbindServiceInstanceMutex.RLock()
	defer fake.unbindServiceInstanceMutex.RUnlock()
	return len(fake.unbindServiceInstanceArgsForCall)
}

func (fake *FakeBrokerController) UnbindServiceInstanceArgsForCall(i int) (*log.Logger, string, string) {
	fake.unbindServiceInstanceMutex.RLock()
	defer fake.unbindServiceInstanceMutex.RUnlock()
	return fake.unbindServiceInstanceArgsForCall[i].logger, fake.unbindServiceInstanceArgsForCall[i].serverInstanceId, fake.unbindServiceInstanceArgsForCall[i].bindingId
}

func (fake *FakeBrokerController) UnbindServiceInstanceReturns(result1 error) {
	fake.UnbindServiceInstanceStub = nil
	fake.unbindServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBrokerController) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCatalogMutex.RLock()
	defer fake.getCatalogMutex.RUnlock()
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	fake.serviceInstanceExistsMutex.RLock()
	defer fake.serviceInstanceExistsMutex.RUnlock()
	fake.serviceInstancePropertiesMatchMutex.RLock()
	defer fake.serviceInstancePropertiesMatchMutex.RUnlock()
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	fake.bindServiceInstanceMutex.RLock()
	defer fake.bindServiceInstanceMutex.RUnlock()
	fake.serviceBindingExistsMutex.RLock()
	defer fake.serviceBindingExistsMutex.RUnlock()
	fake.serviceBindingPropertiesMatchMutex.RLock()
	defer fake.serviceBindingPropertiesMatchMutex.RUnlock()
	fake.getBindingMutex.RLock()
	defer fake.getBindingMutex.RUnlock()
	fake.unbindServiceInstanceMutex.RLock()
	defer fake.unbindServiceInstanceMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeBrokerController) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service_broker.BrokerController = new(FakeBrokerController)
