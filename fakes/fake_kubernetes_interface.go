/**
 * Copyright 2017 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"k8s.io/client-go/discovery"
	"k8s.io/client-go/kubernetes"
	v1beta1apps "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
	v1beta1authentication "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
	v1beta1authorization "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"
	v1autoscaling "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	v1batch "k8s.io/client-go/kubernetes/typed/batch/v1"
	v2alpha1batch "k8s.io/client-go/kubernetes/typed/batch/v2alpha1"
	v1alpha1certificates "k8s.io/client-go/kubernetes/typed/certificates/v1alpha1"
	v1core "k8s.io/client-go/kubernetes/typed/core/v1"
	v1beta1extensions "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	v1beta1policy "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	v1alpha1rbac "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
	v1beta1storage "k8s.io/client-go/kubernetes/typed/storage/v1beta1"
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

type FakeInterface struct {
	DiscoveryStub        func() discovery.DiscoveryInterface
	discoveryMutex       sync.RWMutex
	discoveryArgsForCall []struct{}
	discoveryReturns     struct {
		result1 discovery.DiscoveryInterface
	}
	discoveryReturnsOnCall map[int]struct {
		result1 discovery.DiscoveryInterface
	}
	CoreV1Stub        func() v1core.CoreV1Interface
	coreV1Mutex       sync.RWMutex
	coreV1ArgsForCall []struct{}
	coreV1Returns     struct {
		result1 v1core.CoreV1Interface
	}
	coreV1ReturnsOnCall map[int]struct {
		result1 v1core.CoreV1Interface
	}
	CoreStub        func() v1core.CoreV1Interface
	coreMutex       sync.RWMutex
	coreArgsForCall []struct{}
	coreReturns     struct {
		result1 v1core.CoreV1Interface
	}
	coreReturnsOnCall map[int]struct {
		result1 v1core.CoreV1Interface
	}
	AppsV1beta1Stub        func() v1beta1apps.AppsV1beta1Interface
	appsV1beta1Mutex       sync.RWMutex
	appsV1beta1ArgsForCall []struct{}
	appsV1beta1Returns     struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}
	appsV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}
	AppsStub        func() v1beta1apps.AppsV1beta1Interface
	appsMutex       sync.RWMutex
	appsArgsForCall []struct{}
	appsReturns     struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}
	appsReturnsOnCall map[int]struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}
	AuthenticationV1beta1Stub        func() v1beta1authentication.AuthenticationV1beta1Interface
	authenticationV1beta1Mutex       sync.RWMutex
	authenticationV1beta1ArgsForCall []struct{}
	authenticationV1beta1Returns     struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}
	authenticationV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}
	AuthenticationStub        func() v1beta1authentication.AuthenticationV1beta1Interface
	authenticationMutex       sync.RWMutex
	authenticationArgsForCall []struct{}
	authenticationReturns     struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}
	authenticationReturnsOnCall map[int]struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}
	AuthorizationV1beta1Stub        func() v1beta1authorization.AuthorizationV1beta1Interface
	authorizationV1beta1Mutex       sync.RWMutex
	authorizationV1beta1ArgsForCall []struct{}
	authorizationV1beta1Returns     struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}
	authorizationV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}
	AuthorizationStub        func() v1beta1authorization.AuthorizationV1beta1Interface
	authorizationMutex       sync.RWMutex
	authorizationArgsForCall []struct{}
	authorizationReturns     struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}
	authorizationReturnsOnCall map[int]struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}
	AutoscalingV1Stub        func() v1autoscaling.AutoscalingV1Interface
	autoscalingV1Mutex       sync.RWMutex
	autoscalingV1ArgsForCall []struct{}
	autoscalingV1Returns     struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}
	autoscalingV1ReturnsOnCall map[int]struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}
	AutoscalingStub        func() v1autoscaling.AutoscalingV1Interface
	autoscalingMutex       sync.RWMutex
	autoscalingArgsForCall []struct{}
	autoscalingReturns     struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}
	autoscalingReturnsOnCall map[int]struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}
	BatchV1Stub        func() v1batch.BatchV1Interface
	batchV1Mutex       sync.RWMutex
	batchV1ArgsForCall []struct{}
	batchV1Returns     struct {
		result1 v1batch.BatchV1Interface
	}
	batchV1ReturnsOnCall map[int]struct {
		result1 v1batch.BatchV1Interface
	}
	BatchStub        func() v1batch.BatchV1Interface
	batchMutex       sync.RWMutex
	batchArgsForCall []struct{}
	batchReturns     struct {
		result1 v1batch.BatchV1Interface
	}
	batchReturnsOnCall map[int]struct {
		result1 v1batch.BatchV1Interface
	}
	BatchV2alpha1Stub        func() v2alpha1batch.BatchV2alpha1Interface
	batchV2alpha1Mutex       sync.RWMutex
	batchV2alpha1ArgsForCall []struct{}
	batchV2alpha1Returns     struct {
		result1 v2alpha1batch.BatchV2alpha1Interface
	}
	batchV2alpha1ReturnsOnCall map[int]struct {
		result1 v2alpha1batch.BatchV2alpha1Interface
	}
	CertificatesV1alpha1Stub        func() v1alpha1certificates.CertificatesV1alpha1Interface
	certificatesV1alpha1Mutex       sync.RWMutex
	certificatesV1alpha1ArgsForCall []struct{}
	certificatesV1alpha1Returns     struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}
	certificatesV1alpha1ReturnsOnCall map[int]struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}
	CertificatesStub        func() v1alpha1certificates.CertificatesV1alpha1Interface
	certificatesMutex       sync.RWMutex
	certificatesArgsForCall []struct{}
	certificatesReturns     struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}
	certificatesReturnsOnCall map[int]struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}
	ExtensionsV1beta1Stub        func() v1beta1extensions.ExtensionsV1beta1Interface
	extensionsV1beta1Mutex       sync.RWMutex
	extensionsV1beta1ArgsForCall []struct{}
	extensionsV1beta1Returns     struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}
	extensionsV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}
	ExtensionsStub        func() v1beta1extensions.ExtensionsV1beta1Interface
	extensionsMutex       sync.RWMutex
	extensionsArgsForCall []struct{}
	extensionsReturns     struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}
	extensionsReturnsOnCall map[int]struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}
	PolicyV1beta1Stub        func() v1beta1policy.PolicyV1beta1Interface
	policyV1beta1Mutex       sync.RWMutex
	policyV1beta1ArgsForCall []struct{}
	policyV1beta1Returns     struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}
	policyV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}
	PolicyStub        func() v1beta1policy.PolicyV1beta1Interface
	policyMutex       sync.RWMutex
	policyArgsForCall []struct{}
	policyReturns     struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}
	policyReturnsOnCall map[int]struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}
	RbacV1alpha1Stub        func() v1alpha1rbac.RbacV1alpha1Interface
	rbacV1alpha1Mutex       sync.RWMutex
	rbacV1alpha1ArgsForCall []struct{}
	rbacV1alpha1Returns     struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}
	rbacV1alpha1ReturnsOnCall map[int]struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}
	RbacStub        func() v1alpha1rbac.RbacV1alpha1Interface
	rbacMutex       sync.RWMutex
	rbacArgsForCall []struct{}
	rbacReturns     struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}
	rbacReturnsOnCall map[int]struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}
	StorageV1beta1Stub        func() v1beta1storage.StorageV1beta1Interface
	storageV1beta1Mutex       sync.RWMutex
	storageV1beta1ArgsForCall []struct{}
	storageV1beta1Returns     struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}
	storageV1beta1ReturnsOnCall map[int]struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}
	StorageStub        func() v1beta1storage.StorageV1beta1Interface
	storageMutex       sync.RWMutex
	storageArgsForCall []struct{}
	storageReturns     struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}
	storageReturnsOnCall map[int]struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInterface) Discovery() discovery.DiscoveryInterface {
	fake.discoveryMutex.Lock()
	ret, specificReturn := fake.discoveryReturnsOnCall[len(fake.discoveryArgsForCall)]
	fake.discoveryArgsForCall = append(fake.discoveryArgsForCall, struct{}{})
	fake.recordInvocation("Discovery", []interface{}{})
	fake.discoveryMutex.Unlock()
	if fake.DiscoveryStub != nil {
		return fake.DiscoveryStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.discoveryReturns.result1
}

func (fake *FakeInterface) DiscoveryCallCount() int {
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	return len(fake.discoveryArgsForCall)
}

func (fake *FakeInterface) DiscoveryReturns(result1 discovery.DiscoveryInterface) {
	fake.DiscoveryStub = nil
	fake.discoveryReturns = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *FakeInterface) DiscoveryReturnsOnCall(i int, result1 discovery.DiscoveryInterface) {
	fake.DiscoveryStub = nil
	if fake.discoveryReturnsOnCall == nil {
		fake.discoveryReturnsOnCall = make(map[int]struct {
			result1 discovery.DiscoveryInterface
		})
	}
	fake.discoveryReturnsOnCall[i] = struct {
		result1 discovery.DiscoveryInterface
	}{result1}
}

func (fake *FakeInterface) CoreV1() v1core.CoreV1Interface {
	fake.coreV1Mutex.Lock()
	ret, specificReturn := fake.coreV1ReturnsOnCall[len(fake.coreV1ArgsForCall)]
	fake.coreV1ArgsForCall = append(fake.coreV1ArgsForCall, struct{}{})
	fake.recordInvocation("CoreV1", []interface{}{})
	fake.coreV1Mutex.Unlock()
	if fake.CoreV1Stub != nil {
		return fake.CoreV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.coreV1Returns.result1
}

func (fake *FakeInterface) CoreV1CallCount() int {
	fake.coreV1Mutex.RLock()
	defer fake.coreV1Mutex.RUnlock()
	return len(fake.coreV1ArgsForCall)
}

func (fake *FakeInterface) CoreV1Returns(result1 v1core.CoreV1Interface) {
	fake.CoreV1Stub = nil
	fake.coreV1Returns = struct {
		result1 v1core.CoreV1Interface
	}{result1}
}

func (fake *FakeInterface) CoreV1ReturnsOnCall(i int, result1 v1core.CoreV1Interface) {
	fake.CoreV1Stub = nil
	if fake.coreV1ReturnsOnCall == nil {
		fake.coreV1ReturnsOnCall = make(map[int]struct {
			result1 v1core.CoreV1Interface
		})
	}
	fake.coreV1ReturnsOnCall[i] = struct {
		result1 v1core.CoreV1Interface
	}{result1}
}

func (fake *FakeInterface) Core() v1core.CoreV1Interface {
	fake.coreMutex.Lock()
	ret, specificReturn := fake.coreReturnsOnCall[len(fake.coreArgsForCall)]
	fake.coreArgsForCall = append(fake.coreArgsForCall, struct{}{})
	fake.recordInvocation("Core", []interface{}{})
	fake.coreMutex.Unlock()
	if fake.CoreStub != nil {
		return fake.CoreStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.coreReturns.result1
}

func (fake *FakeInterface) CoreCallCount() int {
	fake.coreMutex.RLock()
	defer fake.coreMutex.RUnlock()
	return len(fake.coreArgsForCall)
}

func (fake *FakeInterface) CoreReturns(result1 v1core.CoreV1Interface) {
	fake.CoreStub = nil
	fake.coreReturns = struct {
		result1 v1core.CoreV1Interface
	}{result1}
}

func (fake *FakeInterface) CoreReturnsOnCall(i int, result1 v1core.CoreV1Interface) {
	fake.CoreStub = nil
	if fake.coreReturnsOnCall == nil {
		fake.coreReturnsOnCall = make(map[int]struct {
			result1 v1core.CoreV1Interface
		})
	}
	fake.coreReturnsOnCall[i] = struct {
		result1 v1core.CoreV1Interface
	}{result1}
}

func (fake *FakeInterface) AppsV1beta1() v1beta1apps.AppsV1beta1Interface {
	fake.appsV1beta1Mutex.Lock()
	ret, specificReturn := fake.appsV1beta1ReturnsOnCall[len(fake.appsV1beta1ArgsForCall)]
	fake.appsV1beta1ArgsForCall = append(fake.appsV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AppsV1beta1", []interface{}{})
	fake.appsV1beta1Mutex.Unlock()
	if fake.AppsV1beta1Stub != nil {
		return fake.AppsV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appsV1beta1Returns.result1
}

func (fake *FakeInterface) AppsV1beta1CallCount() int {
	fake.appsV1beta1Mutex.RLock()
	defer fake.appsV1beta1Mutex.RUnlock()
	return len(fake.appsV1beta1ArgsForCall)
}

func (fake *FakeInterface) AppsV1beta1Returns(result1 v1beta1apps.AppsV1beta1Interface) {
	fake.AppsV1beta1Stub = nil
	fake.appsV1beta1Returns = struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AppsV1beta1ReturnsOnCall(i int, result1 v1beta1apps.AppsV1beta1Interface) {
	fake.AppsV1beta1Stub = nil
	if fake.appsV1beta1ReturnsOnCall == nil {
		fake.appsV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1apps.AppsV1beta1Interface
		})
	}
	fake.appsV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Apps() v1beta1apps.AppsV1beta1Interface {
	fake.appsMutex.Lock()
	ret, specificReturn := fake.appsReturnsOnCall[len(fake.appsArgsForCall)]
	fake.appsArgsForCall = append(fake.appsArgsForCall, struct{}{})
	fake.recordInvocation("Apps", []interface{}{})
	fake.appsMutex.Unlock()
	if fake.AppsStub != nil {
		return fake.AppsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.appsReturns.result1
}

func (fake *FakeInterface) AppsCallCount() int {
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	return len(fake.appsArgsForCall)
}

func (fake *FakeInterface) AppsReturns(result1 v1beta1apps.AppsV1beta1Interface) {
	fake.AppsStub = nil
	fake.appsReturns = struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AppsReturnsOnCall(i int, result1 v1beta1apps.AppsV1beta1Interface) {
	fake.AppsStub = nil
	if fake.appsReturnsOnCall == nil {
		fake.appsReturnsOnCall = make(map[int]struct {
			result1 v1beta1apps.AppsV1beta1Interface
		})
	}
	fake.appsReturnsOnCall[i] = struct {
		result1 v1beta1apps.AppsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AuthenticationV1beta1() v1beta1authentication.AuthenticationV1beta1Interface {
	fake.authenticationV1beta1Mutex.Lock()
	ret, specificReturn := fake.authenticationV1beta1ReturnsOnCall[len(fake.authenticationV1beta1ArgsForCall)]
	fake.authenticationV1beta1ArgsForCall = append(fake.authenticationV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AuthenticationV1beta1", []interface{}{})
	fake.authenticationV1beta1Mutex.Unlock()
	if fake.AuthenticationV1beta1Stub != nil {
		return fake.AuthenticationV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authenticationV1beta1Returns.result1
}

func (fake *FakeInterface) AuthenticationV1beta1CallCount() int {
	fake.authenticationV1beta1Mutex.RLock()
	defer fake.authenticationV1beta1Mutex.RUnlock()
	return len(fake.authenticationV1beta1ArgsForCall)
}

func (fake *FakeInterface) AuthenticationV1beta1Returns(result1 v1beta1authentication.AuthenticationV1beta1Interface) {
	fake.AuthenticationV1beta1Stub = nil
	fake.authenticationV1beta1Returns = struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AuthenticationV1beta1ReturnsOnCall(i int, result1 v1beta1authentication.AuthenticationV1beta1Interface) {
	fake.AuthenticationV1beta1Stub = nil
	if fake.authenticationV1beta1ReturnsOnCall == nil {
		fake.authenticationV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1authentication.AuthenticationV1beta1Interface
		})
	}
	fake.authenticationV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Authentication() v1beta1authentication.AuthenticationV1beta1Interface {
	fake.authenticationMutex.Lock()
	ret, specificReturn := fake.authenticationReturnsOnCall[len(fake.authenticationArgsForCall)]
	fake.authenticationArgsForCall = append(fake.authenticationArgsForCall, struct{}{})
	fake.recordInvocation("Authentication", []interface{}{})
	fake.authenticationMutex.Unlock()
	if fake.AuthenticationStub != nil {
		return fake.AuthenticationStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authenticationReturns.result1
}

func (fake *FakeInterface) AuthenticationCallCount() int {
	fake.authenticationMutex.RLock()
	defer fake.authenticationMutex.RUnlock()
	return len(fake.authenticationArgsForCall)
}

func (fake *FakeInterface) AuthenticationReturns(result1 v1beta1authentication.AuthenticationV1beta1Interface) {
	fake.AuthenticationStub = nil
	fake.authenticationReturns = struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AuthenticationReturnsOnCall(i int, result1 v1beta1authentication.AuthenticationV1beta1Interface) {
	fake.AuthenticationStub = nil
	if fake.authenticationReturnsOnCall == nil {
		fake.authenticationReturnsOnCall = make(map[int]struct {
			result1 v1beta1authentication.AuthenticationV1beta1Interface
		})
	}
	fake.authenticationReturnsOnCall[i] = struct {
		result1 v1beta1authentication.AuthenticationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AuthorizationV1beta1() v1beta1authorization.AuthorizationV1beta1Interface {
	fake.authorizationV1beta1Mutex.Lock()
	ret, specificReturn := fake.authorizationV1beta1ReturnsOnCall[len(fake.authorizationV1beta1ArgsForCall)]
	fake.authorizationV1beta1ArgsForCall = append(fake.authorizationV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("AuthorizationV1beta1", []interface{}{})
	fake.authorizationV1beta1Mutex.Unlock()
	if fake.AuthorizationV1beta1Stub != nil {
		return fake.AuthorizationV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authorizationV1beta1Returns.result1
}

func (fake *FakeInterface) AuthorizationV1beta1CallCount() int {
	fake.authorizationV1beta1Mutex.RLock()
	defer fake.authorizationV1beta1Mutex.RUnlock()
	return len(fake.authorizationV1beta1ArgsForCall)
}

func (fake *FakeInterface) AuthorizationV1beta1Returns(result1 v1beta1authorization.AuthorizationV1beta1Interface) {
	fake.AuthorizationV1beta1Stub = nil
	fake.authorizationV1beta1Returns = struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AuthorizationV1beta1ReturnsOnCall(i int, result1 v1beta1authorization.AuthorizationV1beta1Interface) {
	fake.AuthorizationV1beta1Stub = nil
	if fake.authorizationV1beta1ReturnsOnCall == nil {
		fake.authorizationV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1authorization.AuthorizationV1beta1Interface
		})
	}
	fake.authorizationV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Authorization() v1beta1authorization.AuthorizationV1beta1Interface {
	fake.authorizationMutex.Lock()
	ret, specificReturn := fake.authorizationReturnsOnCall[len(fake.authorizationArgsForCall)]
	fake.authorizationArgsForCall = append(fake.authorizationArgsForCall, struct{}{})
	fake.recordInvocation("Authorization", []interface{}{})
	fake.authorizationMutex.Unlock()
	if fake.AuthorizationStub != nil {
		return fake.AuthorizationStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.authorizationReturns.result1
}

func (fake *FakeInterface) AuthorizationCallCount() int {
	fake.authorizationMutex.RLock()
	defer fake.authorizationMutex.RUnlock()
	return len(fake.authorizationArgsForCall)
}

func (fake *FakeInterface) AuthorizationReturns(result1 v1beta1authorization.AuthorizationV1beta1Interface) {
	fake.AuthorizationStub = nil
	fake.authorizationReturns = struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AuthorizationReturnsOnCall(i int, result1 v1beta1authorization.AuthorizationV1beta1Interface) {
	fake.AuthorizationStub = nil
	if fake.authorizationReturnsOnCall == nil {
		fake.authorizationReturnsOnCall = make(map[int]struct {
			result1 v1beta1authorization.AuthorizationV1beta1Interface
		})
	}
	fake.authorizationReturnsOnCall[i] = struct {
		result1 v1beta1authorization.AuthorizationV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) AutoscalingV1() v1autoscaling.AutoscalingV1Interface {
	fake.autoscalingV1Mutex.Lock()
	ret, specificReturn := fake.autoscalingV1ReturnsOnCall[len(fake.autoscalingV1ArgsForCall)]
	fake.autoscalingV1ArgsForCall = append(fake.autoscalingV1ArgsForCall, struct{}{})
	fake.recordInvocation("AutoscalingV1", []interface{}{})
	fake.autoscalingV1Mutex.Unlock()
	if fake.AutoscalingV1Stub != nil {
		return fake.AutoscalingV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.autoscalingV1Returns.result1
}

func (fake *FakeInterface) AutoscalingV1CallCount() int {
	fake.autoscalingV1Mutex.RLock()
	defer fake.autoscalingV1Mutex.RUnlock()
	return len(fake.autoscalingV1ArgsForCall)
}

func (fake *FakeInterface) AutoscalingV1Returns(result1 v1autoscaling.AutoscalingV1Interface) {
	fake.AutoscalingV1Stub = nil
	fake.autoscalingV1Returns = struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeInterface) AutoscalingV1ReturnsOnCall(i int, result1 v1autoscaling.AutoscalingV1Interface) {
	fake.AutoscalingV1Stub = nil
	if fake.autoscalingV1ReturnsOnCall == nil {
		fake.autoscalingV1ReturnsOnCall = make(map[int]struct {
			result1 v1autoscaling.AutoscalingV1Interface
		})
	}
	fake.autoscalingV1ReturnsOnCall[i] = struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeInterface) Autoscaling() v1autoscaling.AutoscalingV1Interface {
	fake.autoscalingMutex.Lock()
	ret, specificReturn := fake.autoscalingReturnsOnCall[len(fake.autoscalingArgsForCall)]
	fake.autoscalingArgsForCall = append(fake.autoscalingArgsForCall, struct{}{})
	fake.recordInvocation("Autoscaling", []interface{}{})
	fake.autoscalingMutex.Unlock()
	if fake.AutoscalingStub != nil {
		return fake.AutoscalingStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.autoscalingReturns.result1
}

func (fake *FakeInterface) AutoscalingCallCount() int {
	fake.autoscalingMutex.RLock()
	defer fake.autoscalingMutex.RUnlock()
	return len(fake.autoscalingArgsForCall)
}

func (fake *FakeInterface) AutoscalingReturns(result1 v1autoscaling.AutoscalingV1Interface) {
	fake.AutoscalingStub = nil
	fake.autoscalingReturns = struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeInterface) AutoscalingReturnsOnCall(i int, result1 v1autoscaling.AutoscalingV1Interface) {
	fake.AutoscalingStub = nil
	if fake.autoscalingReturnsOnCall == nil {
		fake.autoscalingReturnsOnCall = make(map[int]struct {
			result1 v1autoscaling.AutoscalingV1Interface
		})
	}
	fake.autoscalingReturnsOnCall[i] = struct {
		result1 v1autoscaling.AutoscalingV1Interface
	}{result1}
}

func (fake *FakeInterface) BatchV1() v1batch.BatchV1Interface {
	fake.batchV1Mutex.Lock()
	ret, specificReturn := fake.batchV1ReturnsOnCall[len(fake.batchV1ArgsForCall)]
	fake.batchV1ArgsForCall = append(fake.batchV1ArgsForCall, struct{}{})
	fake.recordInvocation("BatchV1", []interface{}{})
	fake.batchV1Mutex.Unlock()
	if fake.BatchV1Stub != nil {
		return fake.BatchV1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchV1Returns.result1
}

func (fake *FakeInterface) BatchV1CallCount() int {
	fake.batchV1Mutex.RLock()
	defer fake.batchV1Mutex.RUnlock()
	return len(fake.batchV1ArgsForCall)
}

func (fake *FakeInterface) BatchV1Returns(result1 v1batch.BatchV1Interface) {
	fake.BatchV1Stub = nil
	fake.batchV1Returns = struct {
		result1 v1batch.BatchV1Interface
	}{result1}
}

func (fake *FakeInterface) BatchV1ReturnsOnCall(i int, result1 v1batch.BatchV1Interface) {
	fake.BatchV1Stub = nil
	if fake.batchV1ReturnsOnCall == nil {
		fake.batchV1ReturnsOnCall = make(map[int]struct {
			result1 v1batch.BatchV1Interface
		})
	}
	fake.batchV1ReturnsOnCall[i] = struct {
		result1 v1batch.BatchV1Interface
	}{result1}
}

func (fake *FakeInterface) Batch() v1batch.BatchV1Interface {
	fake.batchMutex.Lock()
	ret, specificReturn := fake.batchReturnsOnCall[len(fake.batchArgsForCall)]
	fake.batchArgsForCall = append(fake.batchArgsForCall, struct{}{})
	fake.recordInvocation("Batch", []interface{}{})
	fake.batchMutex.Unlock()
	if fake.BatchStub != nil {
		return fake.BatchStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchReturns.result1
}

func (fake *FakeInterface) BatchCallCount() int {
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	return len(fake.batchArgsForCall)
}

func (fake *FakeInterface) BatchReturns(result1 v1batch.BatchV1Interface) {
	fake.BatchStub = nil
	fake.batchReturns = struct {
		result1 v1batch.BatchV1Interface
	}{result1}
}

func (fake *FakeInterface) BatchReturnsOnCall(i int, result1 v1batch.BatchV1Interface) {
	fake.BatchStub = nil
	if fake.batchReturnsOnCall == nil {
		fake.batchReturnsOnCall = make(map[int]struct {
			result1 v1batch.BatchV1Interface
		})
	}
	fake.batchReturnsOnCall[i] = struct {
		result1 v1batch.BatchV1Interface
	}{result1}
}

func (fake *FakeInterface) BatchV2alpha1() v2alpha1batch.BatchV2alpha1Interface {
	fake.batchV2alpha1Mutex.Lock()
	ret, specificReturn := fake.batchV2alpha1ReturnsOnCall[len(fake.batchV2alpha1ArgsForCall)]
	fake.batchV2alpha1ArgsForCall = append(fake.batchV2alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("BatchV2alpha1", []interface{}{})
	fake.batchV2alpha1Mutex.Unlock()
	if fake.BatchV2alpha1Stub != nil {
		return fake.BatchV2alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.batchV2alpha1Returns.result1
}

func (fake *FakeInterface) BatchV2alpha1CallCount() int {
	fake.batchV2alpha1Mutex.RLock()
	defer fake.batchV2alpha1Mutex.RUnlock()
	return len(fake.batchV2alpha1ArgsForCall)
}

func (fake *FakeInterface) BatchV2alpha1Returns(result1 v2alpha1batch.BatchV2alpha1Interface) {
	fake.BatchV2alpha1Stub = nil
	fake.batchV2alpha1Returns = struct {
		result1 v2alpha1batch.BatchV2alpha1Interface
	}{result1}
}

func (fake *FakeInterface) BatchV2alpha1ReturnsOnCall(i int, result1 v2alpha1batch.BatchV2alpha1Interface) {
	fake.BatchV2alpha1Stub = nil
	if fake.batchV2alpha1ReturnsOnCall == nil {
		fake.batchV2alpha1ReturnsOnCall = make(map[int]struct {
			result1 v2alpha1batch.BatchV2alpha1Interface
		})
	}
	fake.batchV2alpha1ReturnsOnCall[i] = struct {
		result1 v2alpha1batch.BatchV2alpha1Interface
	}{result1}
}

func (fake *FakeInterface) CertificatesV1alpha1() v1alpha1certificates.CertificatesV1alpha1Interface {
	fake.certificatesV1alpha1Mutex.Lock()
	ret, specificReturn := fake.certificatesV1alpha1ReturnsOnCall[len(fake.certificatesV1alpha1ArgsForCall)]
	fake.certificatesV1alpha1ArgsForCall = append(fake.certificatesV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("CertificatesV1alpha1", []interface{}{})
	fake.certificatesV1alpha1Mutex.Unlock()
	if fake.CertificatesV1alpha1Stub != nil {
		return fake.CertificatesV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.certificatesV1alpha1Returns.result1
}

func (fake *FakeInterface) CertificatesV1alpha1CallCount() int {
	fake.certificatesV1alpha1Mutex.RLock()
	defer fake.certificatesV1alpha1Mutex.RUnlock()
	return len(fake.certificatesV1alpha1ArgsForCall)
}

func (fake *FakeInterface) CertificatesV1alpha1Returns(result1 v1alpha1certificates.CertificatesV1alpha1Interface) {
	fake.CertificatesV1alpha1Stub = nil
	fake.certificatesV1alpha1Returns = struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) CertificatesV1alpha1ReturnsOnCall(i int, result1 v1alpha1certificates.CertificatesV1alpha1Interface) {
	fake.CertificatesV1alpha1Stub = nil
	if fake.certificatesV1alpha1ReturnsOnCall == nil {
		fake.certificatesV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 v1alpha1certificates.CertificatesV1alpha1Interface
		})
	}
	fake.certificatesV1alpha1ReturnsOnCall[i] = struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) Certificates() v1alpha1certificates.CertificatesV1alpha1Interface {
	fake.certificatesMutex.Lock()
	ret, specificReturn := fake.certificatesReturnsOnCall[len(fake.certificatesArgsForCall)]
	fake.certificatesArgsForCall = append(fake.certificatesArgsForCall, struct{}{})
	fake.recordInvocation("Certificates", []interface{}{})
	fake.certificatesMutex.Unlock()
	if fake.CertificatesStub != nil {
		return fake.CertificatesStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.certificatesReturns.result1
}

func (fake *FakeInterface) CertificatesCallCount() int {
	fake.certificatesMutex.RLock()
	defer fake.certificatesMutex.RUnlock()
	return len(fake.certificatesArgsForCall)
}

func (fake *FakeInterface) CertificatesReturns(result1 v1alpha1certificates.CertificatesV1alpha1Interface) {
	fake.CertificatesStub = nil
	fake.certificatesReturns = struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) CertificatesReturnsOnCall(i int, result1 v1alpha1certificates.CertificatesV1alpha1Interface) {
	fake.CertificatesStub = nil
	if fake.certificatesReturnsOnCall == nil {
		fake.certificatesReturnsOnCall = make(map[int]struct {
			result1 v1alpha1certificates.CertificatesV1alpha1Interface
		})
	}
	fake.certificatesReturnsOnCall[i] = struct {
		result1 v1alpha1certificates.CertificatesV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) ExtensionsV1beta1() v1beta1extensions.ExtensionsV1beta1Interface {
	fake.extensionsV1beta1Mutex.Lock()
	ret, specificReturn := fake.extensionsV1beta1ReturnsOnCall[len(fake.extensionsV1beta1ArgsForCall)]
	fake.extensionsV1beta1ArgsForCall = append(fake.extensionsV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("ExtensionsV1beta1", []interface{}{})
	fake.extensionsV1beta1Mutex.Unlock()
	if fake.ExtensionsV1beta1Stub != nil {
		return fake.ExtensionsV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.extensionsV1beta1Returns.result1
}

func (fake *FakeInterface) ExtensionsV1beta1CallCount() int {
	fake.extensionsV1beta1Mutex.RLock()
	defer fake.extensionsV1beta1Mutex.RUnlock()
	return len(fake.extensionsV1beta1ArgsForCall)
}

func (fake *FakeInterface) ExtensionsV1beta1Returns(result1 v1beta1extensions.ExtensionsV1beta1Interface) {
	fake.ExtensionsV1beta1Stub = nil
	fake.extensionsV1beta1Returns = struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) ExtensionsV1beta1ReturnsOnCall(i int, result1 v1beta1extensions.ExtensionsV1beta1Interface) {
	fake.ExtensionsV1beta1Stub = nil
	if fake.extensionsV1beta1ReturnsOnCall == nil {
		fake.extensionsV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1extensions.ExtensionsV1beta1Interface
		})
	}
	fake.extensionsV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Extensions() v1beta1extensions.ExtensionsV1beta1Interface {
	fake.extensionsMutex.Lock()
	ret, specificReturn := fake.extensionsReturnsOnCall[len(fake.extensionsArgsForCall)]
	fake.extensionsArgsForCall = append(fake.extensionsArgsForCall, struct{}{})
	fake.recordInvocation("Extensions", []interface{}{})
	fake.extensionsMutex.Unlock()
	if fake.ExtensionsStub != nil {
		return fake.ExtensionsStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.extensionsReturns.result1
}

func (fake *FakeInterface) ExtensionsCallCount() int {
	fake.extensionsMutex.RLock()
	defer fake.extensionsMutex.RUnlock()
	return len(fake.extensionsArgsForCall)
}

func (fake *FakeInterface) ExtensionsReturns(result1 v1beta1extensions.ExtensionsV1beta1Interface) {
	fake.ExtensionsStub = nil
	fake.extensionsReturns = struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) ExtensionsReturnsOnCall(i int, result1 v1beta1extensions.ExtensionsV1beta1Interface) {
	fake.ExtensionsStub = nil
	if fake.extensionsReturnsOnCall == nil {
		fake.extensionsReturnsOnCall = make(map[int]struct {
			result1 v1beta1extensions.ExtensionsV1beta1Interface
		})
	}
	fake.extensionsReturnsOnCall[i] = struct {
		result1 v1beta1extensions.ExtensionsV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) PolicyV1beta1() v1beta1policy.PolicyV1beta1Interface {
	fake.policyV1beta1Mutex.Lock()
	ret, specificReturn := fake.policyV1beta1ReturnsOnCall[len(fake.policyV1beta1ArgsForCall)]
	fake.policyV1beta1ArgsForCall = append(fake.policyV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("PolicyV1beta1", []interface{}{})
	fake.policyV1beta1Mutex.Unlock()
	if fake.PolicyV1beta1Stub != nil {
		return fake.PolicyV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.policyV1beta1Returns.result1
}

func (fake *FakeInterface) PolicyV1beta1CallCount() int {
	fake.policyV1beta1Mutex.RLock()
	defer fake.policyV1beta1Mutex.RUnlock()
	return len(fake.policyV1beta1ArgsForCall)
}

func (fake *FakeInterface) PolicyV1beta1Returns(result1 v1beta1policy.PolicyV1beta1Interface) {
	fake.PolicyV1beta1Stub = nil
	fake.policyV1beta1Returns = struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) PolicyV1beta1ReturnsOnCall(i int, result1 v1beta1policy.PolicyV1beta1Interface) {
	fake.PolicyV1beta1Stub = nil
	if fake.policyV1beta1ReturnsOnCall == nil {
		fake.policyV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1policy.PolicyV1beta1Interface
		})
	}
	fake.policyV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Policy() v1beta1policy.PolicyV1beta1Interface {
	fake.policyMutex.Lock()
	ret, specificReturn := fake.policyReturnsOnCall[len(fake.policyArgsForCall)]
	fake.policyArgsForCall = append(fake.policyArgsForCall, struct{}{})
	fake.recordInvocation("Policy", []interface{}{})
	fake.policyMutex.Unlock()
	if fake.PolicyStub != nil {
		return fake.PolicyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.policyReturns.result1
}

func (fake *FakeInterface) PolicyCallCount() int {
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	return len(fake.policyArgsForCall)
}

func (fake *FakeInterface) PolicyReturns(result1 v1beta1policy.PolicyV1beta1Interface) {
	fake.PolicyStub = nil
	fake.policyReturns = struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) PolicyReturnsOnCall(i int, result1 v1beta1policy.PolicyV1beta1Interface) {
	fake.PolicyStub = nil
	if fake.policyReturnsOnCall == nil {
		fake.policyReturnsOnCall = make(map[int]struct {
			result1 v1beta1policy.PolicyV1beta1Interface
		})
	}
	fake.policyReturnsOnCall[i] = struct {
		result1 v1beta1policy.PolicyV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) RbacV1alpha1() v1alpha1rbac.RbacV1alpha1Interface {
	fake.rbacV1alpha1Mutex.Lock()
	ret, specificReturn := fake.rbacV1alpha1ReturnsOnCall[len(fake.rbacV1alpha1ArgsForCall)]
	fake.rbacV1alpha1ArgsForCall = append(fake.rbacV1alpha1ArgsForCall, struct{}{})
	fake.recordInvocation("RbacV1alpha1", []interface{}{})
	fake.rbacV1alpha1Mutex.Unlock()
	if fake.RbacV1alpha1Stub != nil {
		return fake.RbacV1alpha1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rbacV1alpha1Returns.result1
}

func (fake *FakeInterface) RbacV1alpha1CallCount() int {
	fake.rbacV1alpha1Mutex.RLock()
	defer fake.rbacV1alpha1Mutex.RUnlock()
	return len(fake.rbacV1alpha1ArgsForCall)
}

func (fake *FakeInterface) RbacV1alpha1Returns(result1 v1alpha1rbac.RbacV1alpha1Interface) {
	fake.RbacV1alpha1Stub = nil
	fake.rbacV1alpha1Returns = struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) RbacV1alpha1ReturnsOnCall(i int, result1 v1alpha1rbac.RbacV1alpha1Interface) {
	fake.RbacV1alpha1Stub = nil
	if fake.rbacV1alpha1ReturnsOnCall == nil {
		fake.rbacV1alpha1ReturnsOnCall = make(map[int]struct {
			result1 v1alpha1rbac.RbacV1alpha1Interface
		})
	}
	fake.rbacV1alpha1ReturnsOnCall[i] = struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) Rbac() v1alpha1rbac.RbacV1alpha1Interface {
	fake.rbacMutex.Lock()
	ret, specificReturn := fake.rbacReturnsOnCall[len(fake.rbacArgsForCall)]
	fake.rbacArgsForCall = append(fake.rbacArgsForCall, struct{}{})
	fake.recordInvocation("Rbac", []interface{}{})
	fake.rbacMutex.Unlock()
	if fake.RbacStub != nil {
		return fake.RbacStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rbacReturns.result1
}

func (fake *FakeInterface) RbacCallCount() int {
	fake.rbacMutex.RLock()
	defer fake.rbacMutex.RUnlock()
	return len(fake.rbacArgsForCall)
}

func (fake *FakeInterface) RbacReturns(result1 v1alpha1rbac.RbacV1alpha1Interface) {
	fake.RbacStub = nil
	fake.rbacReturns = struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) RbacReturnsOnCall(i int, result1 v1alpha1rbac.RbacV1alpha1Interface) {
	fake.RbacStub = nil
	if fake.rbacReturnsOnCall == nil {
		fake.rbacReturnsOnCall = make(map[int]struct {
			result1 v1alpha1rbac.RbacV1alpha1Interface
		})
	}
	fake.rbacReturnsOnCall[i] = struct {
		result1 v1alpha1rbac.RbacV1alpha1Interface
	}{result1}
}

func (fake *FakeInterface) StorageV1beta1() v1beta1storage.StorageV1beta1Interface {
	fake.storageV1beta1Mutex.Lock()
	ret, specificReturn := fake.storageV1beta1ReturnsOnCall[len(fake.storageV1beta1ArgsForCall)]
	fake.storageV1beta1ArgsForCall = append(fake.storageV1beta1ArgsForCall, struct{}{})
	fake.recordInvocation("StorageV1beta1", []interface{}{})
	fake.storageV1beta1Mutex.Unlock()
	if fake.StorageV1beta1Stub != nil {
		return fake.StorageV1beta1Stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storageV1beta1Returns.result1
}

func (fake *FakeInterface) StorageV1beta1CallCount() int {
	fake.storageV1beta1Mutex.RLock()
	defer fake.storageV1beta1Mutex.RUnlock()
	return len(fake.storageV1beta1ArgsForCall)
}

func (fake *FakeInterface) StorageV1beta1Returns(result1 v1beta1storage.StorageV1beta1Interface) {
	fake.StorageV1beta1Stub = nil
	fake.storageV1beta1Returns = struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) StorageV1beta1ReturnsOnCall(i int, result1 v1beta1storage.StorageV1beta1Interface) {
	fake.StorageV1beta1Stub = nil
	if fake.storageV1beta1ReturnsOnCall == nil {
		fake.storageV1beta1ReturnsOnCall = make(map[int]struct {
			result1 v1beta1storage.StorageV1beta1Interface
		})
	}
	fake.storageV1beta1ReturnsOnCall[i] = struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Storage() v1beta1storage.StorageV1beta1Interface {
	fake.storageMutex.Lock()
	ret, specificReturn := fake.storageReturnsOnCall[len(fake.storageArgsForCall)]
	fake.storageArgsForCall = append(fake.storageArgsForCall, struct{}{})
	fake.recordInvocation("Storage", []interface{}{})
	fake.storageMutex.Unlock()
	if fake.StorageStub != nil {
		return fake.StorageStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.storageReturns.result1
}

func (fake *FakeInterface) StorageCallCount() int {
	fake.storageMutex.RLock()
	defer fake.storageMutex.RUnlock()
	return len(fake.storageArgsForCall)
}

func (fake *FakeInterface) StorageReturns(result1 v1beta1storage.StorageV1beta1Interface) {
	fake.StorageStub = nil
	fake.storageReturns = struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) StorageReturnsOnCall(i int, result1 v1beta1storage.StorageV1beta1Interface) {
	fake.StorageStub = nil
	if fake.storageReturnsOnCall == nil {
		fake.storageReturnsOnCall = make(map[int]struct {
			result1 v1beta1storage.StorageV1beta1Interface
		})
	}
	fake.storageReturnsOnCall[i] = struct {
		result1 v1beta1storage.StorageV1beta1Interface
	}{result1}
}

func (fake *FakeInterface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.discoveryMutex.RLock()
	defer fake.discoveryMutex.RUnlock()
	fake.coreV1Mutex.RLock()
	defer fake.coreV1Mutex.RUnlock()
	fake.coreMutex.RLock()
	defer fake.coreMutex.RUnlock()
	fake.appsV1beta1Mutex.RLock()
	defer fake.appsV1beta1Mutex.RUnlock()
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	fake.authenticationV1beta1Mutex.RLock()
	defer fake.authenticationV1beta1Mutex.RUnlock()
	fake.authenticationMutex.RLock()
	defer fake.authenticationMutex.RUnlock()
	fake.authorizationV1beta1Mutex.RLock()
	defer fake.authorizationV1beta1Mutex.RUnlock()
	fake.authorizationMutex.RLock()
	defer fake.authorizationMutex.RUnlock()
	fake.autoscalingV1Mutex.RLock()
	defer fake.autoscalingV1Mutex.RUnlock()
	fake.autoscalingMutex.RLock()
	defer fake.autoscalingMutex.RUnlock()
	fake.batchV1Mutex.RLock()
	defer fake.batchV1Mutex.RUnlock()
	fake.batchMutex.RLock()
	defer fake.batchMutex.RUnlock()
	fake.batchV2alpha1Mutex.RLock()
	defer fake.batchV2alpha1Mutex.RUnlock()
	fake.certificatesV1alpha1Mutex.RLock()
	defer fake.certificatesV1alpha1Mutex.RUnlock()
	fake.certificatesMutex.RLock()
	defer fake.certificatesMutex.RUnlock()
	fake.extensionsV1beta1Mutex.RLock()
	defer fake.extensionsV1beta1Mutex.RUnlock()
	fake.extensionsMutex.RLock()
	defer fake.extensionsMutex.RUnlock()
	fake.policyV1beta1Mutex.RLock()
	defer fake.policyV1beta1Mutex.RUnlock()
	fake.policyMutex.RLock()
	defer fake.policyMutex.RUnlock()
	fake.rbacV1alpha1Mutex.RLock()
	defer fake.rbacV1alpha1Mutex.RUnlock()
	fake.rbacMutex.RLock()
	defer fake.rbacMutex.RUnlock()
	fake.storageV1beta1Mutex.RLock()
	defer fake.storageV1beta1Mutex.RUnlock()
	fake.storageMutex.RLock()
	defer fake.storageMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeInterface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ kubernetes.Interface = new(FakeInterface)
