apiVersion: batch/v1
kind: Job
metadata:
  name: pre-delete-deployment-job
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-delete-policy": hook-succeeded
  namespace: ubiquity
  labels:
    app: {{ template "ibm_storage_enabler_for_containers.name" . }}
    chart: {{ template "ibm_storage_enabler_for_containers.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  template:
    spec:
      containers:
      - name: hook
        image: byrnedo/alpine-curl
        env:
        - name: KUBERNETES_DNS_RECORD
          value: "kubernetes.default"
        - name: TOKEN
          value: "cat /var/run/secrets/kubernetes.io/serviceaccount/token"
        - name: DEPLOYMENT_NAME
          value: "ubiquity-db"
        - name: DEPLOYMENT_URL
          value: "https://$(KUBERNETES_DNS_RECORD)/apis/extensions/v1beta1/namespaces/ubiquity/deployments/$(DEPLOYMENT_NAME)"
        - name: POD_URL
          value: "https://$(KUBERNETES_DNS_RECORD)/api/v1/namespaces/ubiquity/pods"
        - name: AUTH
          value: "Authorization: Bearer $TOKEN_VALUE"
        - name: ACCEPT
          value: "Accept: application/json"
        - name: CONTENT_TYPE
          value: "Content-Type: application/strategic-merge-patch+json"
        - name: PATCH_BODY
          value: '{\"spec\":{\"replicas\":0}}'
        - name: PATCH_DEPLOYMENT
          value: "curl -k --cacert /var/run/secrets/kubernetes.io/serviceaccout/ca.crt -H \"$(AUTH)\" -H \"$(ACCEPT)\" -H \"$(CONTENT_TYPE)\" -X PATCH --data $(PATCH_BODY) $(DEPLOYMENT_URL)"
        - name: GET_DEPLOYMENT
          value: "curl -k --cacert /var/run/secrets/kubernetes.io/serviceaccout/ca.crt -H \"$(AUTH)\" $(DEPLOYMENT_URL)"
        - name: GET_AVAILABLE_REPLICAS
          value: "echo $GET_RESPONSE | awk -F 'availableReplicas\": ' '{print $2}' | awk -F ',' '{print $1}'"
        - name: WAIT_FOR_DELETED
          value: "retries=10; while true; do GET_RESPONSE=`$(GET_DEPLOYMENT)`; availableReplicas=`$(GET_AVAILABLE_REPLICAS)`; if [ -z \"$availableReplicas\" ]; then echo \"POD belongs to DEPLOYMENT $(DEPLOYMENT_NAME) was deleted.\"; return; elif [ $retries -eq 0 ]; then echo \"POD belongs to DEPLOYMENT $(DEPLOYMENT_NAME) still exists after all retries. Exiting.\"; exit 2; else echo \"POD belongs to DEPLOYMENT $(DEPLOYMENT_NAME) still exists. sleeping 4 sec before retrying to check.\"; retries=$(($retries-1)); sleep 4; fi; done;"
        - name: TITLE
          value: "Delete deployment ubiquity-db"
        - name: DELIMITER
          value: "--------------------------------------------------------"
        command: ["/bin/sh"]
        args: ["-c", "echo -e '$(DELIMITER)\n$(TITLE)\n$(DELIMITER)'; TOKEN_VALUE=`$(TOKEN)`; echo $(PATCH_DEPLOYMENT); patch=`$(PATCH_DEPLOYMENT)`; $(WAIT_FOR_DELETED)"]
      restartPolicy: Never
      serviceAccount: ubiquity
  backoffLimit: 1
